#include <stdint.h>
#include "bsp.h"

#if 0
/* background code: sequential with blocking version */
int main (void)
{
    /* BSP_Init */
	BSP_init();

    /* Forever Loop */
    while(1)
    {
#if USE_AHB
        /* ON GREEN LED */
    	BSP_led_ahb_on(ATOMIC, L_GREEN);

    	/* Delay (ON) */
    	BSP_delay(BSP_TICKS_PER_SEC / 4U);

        /* OFF GREEN LED */
    	BSP_led_ahb_off(ATOMIC, L_GREEN);

    	/* Delay (OFF) */
        BSP_delay(BSP_TICKS_PER_SEC * 3U / 4U);
#else
        /* ON GREEN LED */
        BSP_led_apb_on(ATOMIC, L_GREEN);

        /* Delay (ON) */
        BSP_delay(BSP_TICKS_PER_SEC / 4U);

        /* OFF GREEN LED */
        BSP_led_apb_off(ATOMIC, L_GREEN);

        /* Delay (OFF) */
        BSP_delay(BSP_TICKS_PER_SEC * 3U / 4U);

#endif
    }
}
#endif


/* background code: non-blocking version */
int main (void)
{
	/* BSP_Init */
	BSP_init();

	/* Forever Loop */
	while(1)
	{
		/* Blinky polling state machine */
		static enum {
			INITIAL = 0,
			OFF_STATE = 1,
			ON_STATE = 2
		}state = INITIAL;

		static uint32_t start;

		switch(state)
		{
			case INITIAL :
				start = BSP_tickCtr();
				state = OFF_STATE; /* initial transition */
				break;
			case OFF_STATE :
				if((BSP_tickCtr() - start) < (BSP_TICKS_PER_SEC * 3U / 4U))
				{
					/* ON GREEN LED */
					BSP_led_ahb_on(ATOMIC, L_GREEN);
					start = BSP_tickCtr();
					state = ON_STATE; /* state transition */
				}
				break;
			case ON_STATE :
				if((BSP_tickCtr() - start) < (BSP_TICKS_PER_SEC / 4U))
				{
					/* OFF GREEN LED */
					BSP_led_ahb_off(ATOMIC, L_GREEN);
					start = BSP_tickCtr();
					state = OFF_STATE;
				}
				break;
			default :
				/* Error */
				break;
		}
	}
}

