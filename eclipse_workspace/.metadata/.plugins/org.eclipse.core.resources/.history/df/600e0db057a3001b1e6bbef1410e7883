/*
 * bsp.c
 *
 *  Created on: 14-Apr-2021
 *      Author: vksalian
 */

#include "bsp.h"

void BSP_Init(void)
{
		/* Enable Clock for GPIO Port F */
	    SYSCTL->RCGCGPIO |= PORTF_CLK;

	#if USE_AHB
	    /* Enable AHB for GPIO Port F */
	    SYSCTL->GPIOHBCTL |= (1U<<5);

	    /* Set directions of All LEDs pins to Output */
	    led_ahb_dir(OUTPUT, L_RED|L_BLUE|L_GREEN);

	    /* Enable Digital functionality for All LED pins */
	    led_ahb_dig_en(ENABLE, L_RED|L_BLUE|L_GREEN);

	    /* Turn off All LEDs */
	    led_ahb_off_all(ATOMIC);
	#else
	    /* Enable AHB for GPIO Port F */
	    SYSCTL->GPIOHBCTL &= ~(1U<<5);

	    /* Set directions of All LEDs pins to Output */
	    led_apb_dir(OUTPUT, L_RED|L_BLUE|L_GREEN);

	    /* Enable Digital functionality for All LED pins */
	    led_apb_dig_en(ENABLE, L_RED|L_BLUE|L_GREEN);

	    /* Turn off All LEDs */
	    led_apb_off_all(ATOMIC);
	#endif

	    /* Note: Here we are directly calling the functions to configure SysTick
	     * timer.
	     */
	    SystemCoreClockUpdate();
	    SysTick_Config(SystemCoreClock / BSP_TICKS_PER_SEC);

		/* Enable Interrupts */
		__enable_irq();
}

/* APB */

void led_apb_dir(gpio_dir dir, uint8_t pin)
{
    if (dir == OUTPUT)
    {
        GPIOF->DIR |= pin;
    }
    else
    {
        GPIOF->DIR &= ~(pin);
    }
}

void led_apb_dig_en(gpio_dig en, uint8_t pin)
{
    if (en == ENABLE)
    {
        GPIOF->DEN |= pin;
    }
    else
    {
        GPIOF->DEN &= ~(pin);
    }
}

void led_apb_toggle(gpio_atomic atom, uint8_t pin)
{
	if(atom == ATOMIC)
	{
		GPIOF->DATA_BITS[pin] ^= pin;
	}
	else
	{
		GPIOF->DATA ^= pin;
	}
}

void led_apb_on(gpio_atomic atom, uint8_t pin)
{
	if(atom == ATOMIC)
	{
		GPIOF->DATA_BITS[pin] = pin;
		/* The below is the way to use atomic Write. The atomic write makes use
		 * of initial 256 registers (0-255) with each 32-bit register for 1 bit
		 * modification (8pins * 32 = 256) */
		 // *((volatile unsigned int *)(0x40025000 + (pin << 2))) = pin;
	}
	else
	{
		GPIOF->DATA |= pin;
	}
}

void led_apb_off(gpio_atomic atom, uint8_t pin)
{
	if(atom == ATOMIC)
	{
		GPIOF->DATA_BITS[pin] = 0;
		/* The below is the way to use atomic Write. The atomic write makes use
		 * of initial 256 registers (0-255) with each 32-bit register for 1 bit
		 * modification (8pins * 32 = 256) */
		 // *((volatile unsigned int *)(0x40025000 + (pin << 2))) = pin;
	}
	else
	{
		GPIOF->DATA &= ~(pin);
	}
}

void led_apb_off_all(gpio_atomic atom)
{
	if(atom == ATOMIC)
	{
		GPIOF->DATA_BITS[L_RED] = 0;
		GPIOF->DATA_BITS[L_BLUE] = 0;
		GPIOF->DATA_BITS[L_GREEN] = 0;
	}
	else
	{
		GPIOF->DATA &= ~(L_RED|L_BLUE|L_GREEN);
	}
}

/* AHB */
void led_ahb_dir(gpio_dir dir, uint8_t pin)
{
    if (dir == OUTPUT)
    {
        GPIOF_AHB->DIR |= pin;
    }
    else
    {
        GPIOF_AHB->DIR &= ~(pin);
    }
}

void led_ahb_dig_en(gpio_dig en, uint8_t pin)
{
    if (en == ENABLE)
    {
        GPIOF_AHB->DEN |= pin;
    }
    else
    {
        GPIOF_AHB->DEN &= ~(pin);
    }
}

void led_ahb_toggle(gpio_atomic atom, uint8_t pin)
{
	if(atom == ATOMIC)
	{
		GPIOF_AHB->DATA_BITS[pin] ^= pin;
	}
	else
	{
		GPIOF_AHB->DATA ^= pin;
	}
}

void led_ahb_on(gpio_atomic atom, uint8_t pin)
{
	if(atom == ATOMIC)
	{
		GPIOF_AHB->DATA_BITS[pin] = pin;

		/* The below is the way to use atomic Write. The atomic write makes use
			 * of initial 256 registers (0-255) with each 32-bit register for 1 bit
			 * modification (8pins * 32 = 256) */
		    // *((volatile unsigned int *)(0x40025000 + (pin << 2))) = pin;
	}
	else
	{
		GPIOF_AHB->DATA |= pin;
	}
}

void led_ahb_off(gpio_atomic atom, uint8_t pin)
{
	if(atom == ATOMIC)
	{
		GPIOF_AHB->DATA_BITS[pin] = 0;

		/* The below is the way to use atomic Write. The atomic write makes use
		 * of initial 256 registers (0-255) with each 32-bit register for 1 bit
		 * modification (8pins * 32 = 256) */
		 // *((volatile unsigned int *)(0x40025000 + (pin << 2))) = pin;
	}
	else
	{
		GPIOF_AHB->DATA &= ~(pin);
	}
}

void led_ahb_off_all(gpio_atomic atom)
{
	if(atom == ATOMIC)
	{
		GPIOF_AHB->DATA_BITS[L_RED] = 0;
		GPIOF_AHB->DATA_BITS[L_BLUE] = 0;
		GPIOF_AHB->DATA_BITS[L_GREEN] = 0;
	}
	else
	{
		GPIOF_AHB->DATA &= ~(L_RED|L_BLUE|L_GREEN);
	}
}

/* This function will override the weak function */
void SysTick_Handler(void)
{
#if USE_AHB
        /* Toggle RED LED */
        led_ahb_toggle(ATOMIC, L_RED);
#else
        /* Toggle RED LED */
        led_apb_toggle(ATOMIC, L_RED);
#endif
}

__attribute__((naked)) void assert_failed (char const *file, int line) {
    /* TBD: damage control */
    NVIC_SystemReset(); /* reset the system */
}

